* TODO items :)

* When a feature has lots of macros and there is an option to execute a feature file with line numbers, then those line numbers will need mapping forward to the resultant processed feature file...



* Editor: When reporting test run errors, it should be possible to open the macro file and see which lines were reported red
	Because the execution report includes macro file line references




* Use the Cucumber snippet generator to improve the code hints for the web editor
	https://github.com/cucumber/cucumber-jvm/blob/20db608a5535850139ba25fcdb9be3ae46991855/core/src/main/java/cucumber/runtime/snippets/SnippetGenerator.java
These escape patterns need handling if they don't appear in a capture group: "\\\\" "\\$" "\\(" "\\)" "\\[" "\\]" "\\?" "\\*" "\\+" "\\." "\\^"


* Need to add MSVC compatible error output so the IDE can work with F4 to move to the next build/test error in the feature/macro


* Add a list of potential values that can be used for regex sections (either paramters/capture groups or other regex areas)
	Can bew retrieved from the regex itself or comments in the step definition



* Add pom exec test for command line: --glue TestGlue features
	Use the pom to execute the above command line as part of the test phase and verify the results.



* For ACEServer project write the regex information to "target/gherkin-steps.js" in the following format:
This is to enable the ACE browser editor to pickup changing regex for feature file authoring.
	// Steps that can be used for gherkin
	var simplePotentials = [
	"Given I have a 6502 machine",
	"When I assemble this file *"
	];

	// Note: The indentation for snippets must be tabs not spaces!
	var complexPotentials = "\
	snippet Then the memory at address is value\n\
		Then the memory at ${1:address} is ${2:value}\n\
	";



* Obtain method parameter names http://stackoverflow.com/questions/2237803/can-i-obtain-method-parameter-name-using-java-reflection
** Added com.replicanet.cukesplus.GlueProcessor.getParameterNames(Method method) which uses java.lang.reflect.Parameter.isNamePresent()



* Add a mapping file that schedules tests based on changes from source control.
	Based on source control code changes or referenced JIRAs, automate the selection and prioritization of tests and any dependencies.
	For example of source control changes indicate that source file in certain paths change then map these to execute certain feature files first and/or apply tag filters.
	With realtime report generation this will help indicate significant problems in lengthy continuous integration build and test run cycles.
	Giving more timely reports to developers will help shorten the time between test failure reports and code fixes.



* Spot text areas and tables and output suitable snippets.



* Generate syntax hints or at the very least if they don't exist return back syntax hints with a message telling the user to run once and refresh the page.
