* TODO items :)

* Editor: When reporting test run errors, it should be possible to open the macro file and see which lines were reported red
	Because the execution report includes macro file line references
	Also featureURIToProcessedFeature files contain lines that flag where the macro file and line is. e.g. "#>> 12 : macros\test6.macro"
		Also #>>> is the line in the macro file previously flagged by #>>




* Indentation of macros in final report...
	* The macro processing needs to add macro depth to the debug. Just after lines like this: #>>> 13
		>> internalProcessFeatureFile
			Perhaps maintain a depth in this method and output that for every macro expansion?
			>> Now this comment outputs depth: "#>>> macro file line , depth"
	* Need to add indentation to the report json
		>> gherkin.formatter.Reporter
		>> Could this indentation be hacked into the reported step by the caller to the report class?
			Perhaps the Match
		>> When processing, if a comment is "#>> " or "#> " then reset the depth, only use the depth when "#>>> xx , depth" is encountered
		>> In the output json look for: MacroStepDefinition.fake which is output by cucumber.runtime.java.MacroStepDefinition.getLocation
			> Unfortunately this is not used during the report generation, it is used during test execution
		>> Note:
			gherkin.formatter.JSONFormatter
			cucumber.runtime.formatter.HTMLFormatter
		>> It seems that gherkin.formatter.model.BasicStatement.keyword could be indented...
			Where is it creating that? Does it have access to the feature debug at that point?
				Yes it does!
				Unfortunately using the debugger to prefix the keyword with whitespace does not result in indented display in the HTML, but the json does contain indentation
				Using non-whitespace ">>" does show in the HTML report however...
				The HTML report does contain the keyword text verbatim, including the whitespace...
				However the span style seems to discard prefix whitespace, ignore horizontal margins basically: https://stackoverflow.com/questions/11685897/how-to-apply-space-in-span-element
				This fixes the style in the browser debugger: white-space: pre;
					In: .cucumber-report .keyword in style.css
				Also cucumber.runtime.formatter.HTMLFormatter.step seems to be escaping "&nbsp;" in the output HTML
				>> Although using "\u00A0" in the debugger for "keyword" seems to work!
				>> So create something that alters the parameters for BasicStatement()
					Actually gherkin.formatter.model.Step would be better...
		>> AspectJ interception theBasicStatementNew adds "\u00A0" indentation to the step keyword
		* TODO: Reusing the <details> optional expansion seems like a good style choice in the report, but it seems to be quite finicky to use...






* Where MacroStepDefinition is created, add the corresponding glueMap key value as a value retuend by MacroStepDefinition.getLocation()




* Use the Cucumber snippet generator to improve the code hints for the web editor
	https://github.com/cucumber/cucumber-jvm/blob/20db608a5535850139ba25fcdb9be3ae46991855/core/src/main/java/cucumber/runtime/snippets/SnippetGenerator.java
These escape patterns need handling if they don't appear in a capture group: "\\\\" "\\$" "\\(" "\\)" "\\[" "\\]" "\\?" "\\*" "\\+" "\\." "\\^"


* Need to add MSVC compatible error output so the IDE can work with F4 to move to the next build/test error in the feature/macro


* Add a list of potential values that can be used for regex sections (either paramters/capture groups or other regex areas)
	Can bew retrieved from the regex itself or comments in the step definition



* Add pom exec test for command line: --glue TestGlue features
	Use the pom to execute the above command line as part of the test phase and verify the results.



* For ACEServer project write the regex information to "target/gherkin-steps.js" in the following format:
This is to enable the ACE browser editor to pickup changing regex for feature file authoring.
	// Steps that can be used for gherkin
	var simplePotentials = [
	"Given I have a 6502 machine",
	"When I assemble this file *"
	];

	// Note: The indentation for snippets must be tabs not spaces!
	var complexPotentials = "\
	snippet Then the memory at address is value\n\
		Then the memory at ${1:address} is ${2:value}\n\
	";



* Obtain method parameter names http://stackoverflow.com/questions/2237803/can-i-obtain-method-parameter-name-using-java-reflection
** Added com.replicanet.cukesplus.GlueProcessor.getParameterNames(Method method) which uses java.lang.reflect.Parameter.isNamePresent()



* Add a mapping file that schedules tests based on changes from source control.
	Based on source control code changes or referenced JIRAs, automate the selection and prioritization of tests and any dependencies.
	For example of source control changes indicate that source file in certain paths change then map these to execute certain feature files first and/or apply tag filters.
	With realtime report generation this will help indicate significant problems in lengthy continuous integration build and test run cycles.
	Giving more timely reports to developers will help shorten the time between test failure reports and code fixes.



* Spot text areas and tables and output suitable snippets.



* Generate syntax hints or at the very least if they don't exist return back syntax hints with a message telling the user to run once and refresh the page.
