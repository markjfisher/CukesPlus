* Feature macro processing.
	For example given the macro feature file:
		Feature: foo
			Scenario: foo2
				Given I do this 4 times for *
				Given I do this 4 times for * again
				And I do that 8 times
				And I wibble 2 this 3 times

	And the macro file:
		# A comment, with a simple macro definition just using stars as replacements for (.*) regex
		# $1 $2 etc are numbered parameters for the * parameters defined in the macro
		# Note the double \* will escape the * so that it isn't treated as a parameter
		Given I do this * times for \*
			* it expands to this
			* also expands to $1

		# A variant on the above is to supply named parameters, note the named paramters starts with '$'
		Given I do this * times for \* again
		$first
			* it expands to this
			* also expands to $first

		# A variant on the above where it uses java syntax for the step definition and regex
		@Given("^I do that (.*) times$")
			# Any line without a Given, When, Then, And or * step keyword will be output with * automatically
			does this and $1 that
			* also uses this $ parameter

		# Another variant on the above is to specify named parameters, also like the simple named paramaters example above
		# The parameter is referenced by adding the name to the $ in the step
		@Given("^I wibble (.*) this (.*) times (.*)$")
		$first $second
		# Nore the third named parameter is on a new line without indentation
		$third
			* also uses this $first parameter
			# Numbers can still be used to index the parameters
			* also uses this $2 parameter



* Add pom exec test for command line: --glue TestGlue features
	Use the pom to execute the above command line as part of the test phase and verify the results.



* For ACEServer project write the regex information to "target/gherkin-steps.js" in the following format:
This is to enable the ACE browser editor to pickup changing regex for feature file authoring.
	// Steps that can be used for gherkin
	var simplePotentials = [
	"Given I have a 6502 machine",
	"When I assemble this file *"
	];

	// Note: The indentation for snippets must be tabs not spaces!
	var complexPotentials = "\
	snippet Then the memory at address is value\n\
		Then the memory at ${1:address} is ${2:value}\n\
	";



* Obtain method parameter names http://stackoverflow.com/questions/2237803/can-i-obtain-method-parameter-name-using-java-reflection
** Added com.replicanet.cukesplus.GlueProcessor.getParameterNames(Method method) which uses java.lang.reflect.Parameter.isNamePresent()



* Add a mapping file that schedules tests based on changes from source control.
	Based on source control code changes or referenced JIRAs, automate the selection and prioritization of tests and any dependencies.
	For example of source control changes indicate that source file in certain paths change then map these to execute certain feature files first and/or apply tag filters.
	With realtime report generation this will help indicate significant problems in lengthy continuous integration build and test run cycles.
	Giving more timely reports to developers will help shorten the time between test failure reports and code fixes.



* Spot text areas and tables and output suitable snippets.
